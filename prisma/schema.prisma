// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TeamRole {
  OWNER
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  isArchived            Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  teams                 TeamMember[]
  notifications         UserNotification[]
  notificationsEnabled  Boolean                @default(true)
}

model UserNotification {
  id                      String    @id @default(cuid())
  userId                  String
  title                   String
  message                 String
  dangerouslySetInnerHTML String
  readAt                  DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model TeamMember {
  teamId    String
  userId    String
  role      TeamRole @default(USER)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
}

model Team {
  id               String       @id @default(cuid())
  name             String
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isArchived       Boolean      @default(false)
  image            String?
  members          TeamMember[]
  subscriptions     Customer[]
  stripeCustomerId String?
  stripePaymentId  String?
}

model Customer {
  id                   String        @id @default(cuid())
  teamId               String
  userId               String
  team                 Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invoices             CustomerInvoice[]
  stripeCustomerId     String        @unique
  stripeSubscriptionId String
  startDate            DateTime      @default(now())
  endDate              DateTime
  planId               String
  email                String
  status               String
  cancelAtPeriodEnd    Boolean
}

model CustomerInvoice {
  id                   String   @id @default(cuid())
  invoiceId            String
  customerId           String
  customer             Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String   
  amountPaid           Float
  amountDue            Float
  currency             String
  status               String
  teamId               String
  email                String
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  newEmail  String?
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model ConciergeToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  teamId    String
  email     String
  name      String
  role      TeamRole

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
